/**
 * @typedef {import("@babel/types").CommentBlock} CommentBlock
 * @typedef {import("@babel/types").CommentLine} CommentLine
 * @typedef {import("@babel/types").SourceLocation} SourceLocation
 * @typedef {import("@babel/types").ArrayExpression} ArrayExpression
 * @typedef {import("@babel/types").AssignmentExpression} AssignmentExpression
 * @typedef {import("@babel/types").BinaryExpression} BinaryExpression
 * @typedef {import("@babel/types").InterpreterDirective} InterpreterDirective
 * @typedef {import("@babel/types").Directive} Directive
 * @typedef {import("@babel/types").DirectiveLiteral} DirectiveLiteral
 * @typedef {import("@babel/types").BlockStatement} BlockStatement
 * @typedef {import("@babel/types").BreakStatement} BreakStatement
 * @typedef {import("@babel/types").CallExpression} CallExpression
 * @typedef {import("@babel/types").CatchClause} CatchClause
 * @typedef {import("@babel/types").ConditionalExpression} ConditionalExpression
 * @typedef {import("@babel/types").ContinueStatement} ContinueStatement
 * @typedef {import("@babel/types").DebuggerStatement} DebuggerStatement
 * @typedef {import("@babel/types").DoWhileStatement} DoWhileStatement
 * @typedef {import("@babel/types").EmptyStatement} EmptyStatement
 * @typedef {import("@babel/types").ExpressionStatement} ExpressionStatement
 * @typedef {import("@babel/types").File} File
 * @typedef {import("@babel/types").ForInStatement} ForInStatement
 * @typedef {import("@babel/types").ForStatement} ForStatement
 * @typedef {import("@babel/types").FunctionDeclaration} FunctionDeclaration
 * @typedef {import("@babel/types").FunctionExpression} FunctionExpression
 * @typedef {import("@babel/types").Identifier} Identifier
 * @typedef {import("@babel/types").IfStatement} IfStatement
 * @typedef {import("@babel/types").LabeledStatement} LabeledStatement
 * @typedef {import("@babel/types").StringLiteral} StringLiteral
 * @typedef {import("@babel/types").NumericLiteral} NumericLiteral
 * @typedef {import("@babel/types").NullLiteral} NullLiteral
 * @typedef {import("@babel/types").BooleanLiteral} BooleanLiteral
 * @typedef {import("@babel/types").RegExpLiteral} RegExpLiteral
 * @typedef {import("@babel/types").LogicalExpression} LogicalExpression
 * @typedef {import("@babel/types").MemberExpression} MemberExpression
 * @typedef {import("@babel/types").NewExpression} NewExpression
 * @typedef {import("@babel/types").Program} Program
 * @typedef {import("@babel/types").ObjectExpression} ObjectExpression
 * @typedef {import("@babel/types").ObjectMethod} ObjectMethod
 * @typedef {import("@babel/types").ObjectProperty} ObjectProperty
 * @typedef {import("@babel/types").RestElement} RestElement
 * @typedef {import("@babel/types").ReturnStatement} ReturnStatement
 * @typedef {import("@babel/types").SequenceExpression} SequenceExpression
 * @typedef {import("@babel/types").ParenthesizedExpression} ParenthesizedExpression
 * @typedef {import("@babel/types").SwitchCase} SwitchCase
 * @typedef {import("@babel/types").SwitchStatement} SwitchStatement
 * @typedef {import("@babel/types").ThisExpression} ThisExpression
 * @typedef {import("@babel/types").ThrowStatement} ThrowStatement
 * @typedef {import("@babel/types").TryStatement} TryStatement
 * @typedef {import("@babel/types").UnaryExpression} UnaryExpression
 * @typedef {import("@babel/types").UpdateExpression} UpdateExpression
 * @typedef {import("@babel/types").VariableDeclaration} VariableDeclaration
 * @typedef {import("@babel/types").VariableDeclarator} VariableDeclarator
 * @typedef {import("@babel/types").WhileStatement} WhileStatement
 * @typedef {import("@babel/types").WithStatement} WithStatement
 * @typedef {import("@babel/types").AssignmentPattern} AssignmentPattern
 * @typedef {import("@babel/types").ArrayPattern} ArrayPattern
 * @typedef {import("@babel/types").ArrowFunctionExpression} ArrowFunctionExpression
 * @typedef {import("@babel/types").ClassBody} ClassBody
 * @typedef {import("@babel/types").ClassExpression} ClassExpression
 * @typedef {import("@babel/types").ClassDeclaration} ClassDeclaration
 * @typedef {import("@babel/types").ExportAllDeclaration} ExportAllDeclaration
 * @typedef {import("@babel/types").ExportDefaultDeclaration} ExportDefaultDeclaration
 * @typedef {import("@babel/types").ExportNamedDeclaration} ExportNamedDeclaration
 * @typedef {import("@babel/types").ExportSpecifier} ExportSpecifier
 * @typedef {import("@babel/types").ForOfStatement} ForOfStatement
 * @typedef {import("@babel/types").ImportDeclaration} ImportDeclaration
 * @typedef {import("@babel/types").ImportDefaultSpecifier} ImportDefaultSpecifier
 * @typedef {import("@babel/types").ImportNamespaceSpecifier} ImportNamespaceSpecifier
 * @typedef {import("@babel/types").ImportSpecifier} ImportSpecifier
 * @typedef {import("@babel/types").MetaProperty} MetaProperty
 * @typedef {import("@babel/types").ClassMethod} ClassMethod
 * @typedef {import("@babel/types").ObjectPattern} ObjectPattern
 * @typedef {import("@babel/types").SpreadElement} SpreadElement
 * @typedef {import("@babel/types").Super} Super
 * @typedef {import("@babel/types").TaggedTemplateExpression} TaggedTemplateExpression
 * @typedef {import("@babel/types").TemplateElement} TemplateElement
 * @typedef {import("@babel/types").TemplateLiteral} TemplateLiteral
 * @typedef {import("@babel/types").YieldExpression} YieldExpression
 * @typedef {import("@babel/types").AwaitExpression} AwaitExpression
 * @typedef {import("@babel/types").Import} Import
 * @typedef {import("@babel/types").BigIntLiteral} BigIntLiteral
 * @typedef {import("@babel/types").ExportNamespaceSpecifier} ExportNamespaceSpecifier
 * @typedef {import("@babel/types").OptionalMemberExpression} OptionalMemberExpression
 * @typedef {import("@babel/types").OptionalCallExpression} OptionalCallExpression
 * @typedef {import("@babel/types").AnyTypeAnnotation} AnyTypeAnnotation
 * @typedef {import("@babel/types").ArrayTypeAnnotation} ArrayTypeAnnotation
 * @typedef {import("@babel/types").BooleanTypeAnnotation} BooleanTypeAnnotation
 * @typedef {import("@babel/types").BooleanLiteralTypeAnnotation} BooleanLiteralTypeAnnotation
 * @typedef {import("@babel/types").NullLiteralTypeAnnotation} NullLiteralTypeAnnotation
 * @typedef {import("@babel/types").ClassImplements} ClassImplements
 * @typedef {import("@babel/types").DeclareClass} DeclareClass
 * @typedef {import("@babel/types").DeclareFunction} DeclareFunction
 * @typedef {import("@babel/types").DeclareInterface} DeclareInterface
 * @typedef {import("@babel/types").DeclareModule} DeclareModule
 * @typedef {import("@babel/types").DeclareModuleExports} DeclareModuleExports
 * @typedef {import("@babel/types").DeclareTypeAlias} DeclareTypeAlias
 * @typedef {import("@babel/types").DeclareOpaqueType} DeclareOpaqueType
 * @typedef {import("@babel/types").DeclareVariable} DeclareVariable
 * @typedef {import("@babel/types").DeclareExportDeclaration} DeclareExportDeclaration
 * @typedef {import("@babel/types").DeclareExportAllDeclaration} DeclareExportAllDeclaration
 * @typedef {import("@babel/types").DeclaredPredicate} DeclaredPredicate
 * @typedef {import("@babel/types").ExistsTypeAnnotation} ExistsTypeAnnotation
 * @typedef {import("@babel/types").FunctionTypeAnnotation} FunctionTypeAnnotation
 * @typedef {import("@babel/types").FunctionTypeParam} FunctionTypeParam
 * @typedef {import("@babel/types").GenericTypeAnnotation} GenericTypeAnnotation
 * @typedef {import("@babel/types").InferredPredicate} InferredPredicate
 * @typedef {import("@babel/types").InterfaceExtends} InterfaceExtends
 * @typedef {import("@babel/types").InterfaceDeclaration} InterfaceDeclaration
 * @typedef {import("@babel/types").InterfaceTypeAnnotation} InterfaceTypeAnnotation
 * @typedef {import("@babel/types").IntersectionTypeAnnotation} IntersectionTypeAnnotation
 * @typedef {import("@babel/types").MixedTypeAnnotation} MixedTypeAnnotation
 * @typedef {import("@babel/types").EmptyTypeAnnotation} EmptyTypeAnnotation
 * @typedef {import("@babel/types").NullableTypeAnnotation} NullableTypeAnnotation
 * @typedef {import("@babel/types").NumberLiteralTypeAnnotation} NumberLiteralTypeAnnotation
 * @typedef {import("@babel/types").NumberTypeAnnotation} NumberTypeAnnotation
 * @typedef {import("@babel/types").ObjectTypeAnnotation} ObjectTypeAnnotation
 * @typedef {import("@babel/types").ObjectTypeInternalSlot} ObjectTypeInternalSlot
 * @typedef {import("@babel/types").ObjectTypeCallProperty} ObjectTypeCallProperty
 * @typedef {import("@babel/types").ObjectTypeIndexer} ObjectTypeIndexer
 * @typedef {import("@babel/types").ObjectTypeProperty} ObjectTypeProperty
 * @typedef {import("@babel/types").ObjectTypeSpreadProperty} ObjectTypeSpreadProperty
 * @typedef {import("@babel/types").OpaqueType} OpaqueType
 * @typedef {import("@babel/types").QualifiedTypeIdentifier} QualifiedTypeIdentifier
 * @typedef {import("@babel/types").StringLiteralTypeAnnotation} StringLiteralTypeAnnotation
 * @typedef {import("@babel/types").StringTypeAnnotation} StringTypeAnnotation
 * @typedef {import("@babel/types").SymbolTypeAnnotation} SymbolTypeAnnotation
 * @typedef {import("@babel/types").ThisTypeAnnotation} ThisTypeAnnotation
 * @typedef {import("@babel/types").TupleTypeAnnotation} TupleTypeAnnotation
 * @typedef {import("@babel/types").TypeofTypeAnnotation} TypeofTypeAnnotation
 * @typedef {import("@babel/types").TypeAlias} TypeAlias
 * @typedef {import("@babel/types").TypeAnnotation} TypeAnnotation
 * @typedef {import("@babel/types").TypeCastExpression} TypeCastExpression
 * @typedef {import("@babel/types").TypeParameter} TypeParameter
 * @typedef {import("@babel/types").TypeParameterDeclaration} TypeParameterDeclaration
 * @typedef {import("@babel/types").TypeParameterInstantiation} TypeParameterInstantiation
 * @typedef {import("@babel/types").UnionTypeAnnotation} UnionTypeAnnotation
 * @typedef {import("@babel/types").Variance} Variance
 * @typedef {import("@babel/types").VoidTypeAnnotation} VoidTypeAnnotation
 * @typedef {import("@babel/types").EnumDeclaration} EnumDeclaration
 * @typedef {import("@babel/types").EnumBooleanBody} EnumBooleanBody
 * @typedef {import("@babel/types").EnumNumberBody} EnumNumberBody
 * @typedef {import("@babel/types").EnumStringBody} EnumStringBody
 * @typedef {import("@babel/types").EnumSymbolBody} EnumSymbolBody
 * @typedef {import("@babel/types").EnumBooleanMember} EnumBooleanMember
 * @typedef {import("@babel/types").EnumNumberMember} EnumNumberMember
 * @typedef {import("@babel/types").EnumStringMember} EnumStringMember
 * @typedef {import("@babel/types").EnumDefaultedMember} EnumDefaultedMember
 * @typedef {import("@babel/types").JSXAttribute} JSXAttribute
 * @typedef {import("@babel/types").JSXClosingElement} JSXClosingElement
 * @typedef {import("@babel/types").JSXElement} JSXElement
 * @typedef {import("@babel/types").JSXEmptyExpression} JSXEmptyExpression
 * @typedef {import("@babel/types").JSXExpressionContainer} JSXExpressionContainer
 * @typedef {import("@babel/types").JSXSpreadChild} JSXSpreadChild
 * @typedef {import("@babel/types").JSXIdentifier} JSXIdentifier
 * @typedef {import("@babel/types").JSXMemberExpression} JSXMemberExpression
 * @typedef {import("@babel/types").JSXNamespacedName} JSXNamespacedName
 * @typedef {import("@babel/types").JSXOpeningElement} JSXOpeningElement
 * @typedef {import("@babel/types").JSXSpreadAttribute} JSXSpreadAttribute
 * @typedef {import("@babel/types").JSXText} JSXText
 * @typedef {import("@babel/types").JSXFragment} JSXFragment
 * @typedef {import("@babel/types").JSXOpeningFragment} JSXOpeningFragment
 * @typedef {import("@babel/types").JSXClosingFragment} JSXClosingFragment
 * @typedef {import("@babel/types").Noop} Noop
 * @typedef {import("@babel/types").Placeholder} Placeholder
 * @typedef {import("@babel/types").V8IntrinsicIdentifier} V8IntrinsicIdentifier
 * @typedef {import("@babel/types").ArgumentPlaceholder} ArgumentPlaceholder
 * @typedef {import("@babel/types").BindExpression} BindExpression
 * @typedef {import("@babel/types").ClassProperty} ClassProperty
 * @typedef {import("@babel/types").PipelineTopicExpression} PipelineTopicExpression
 * @typedef {import("@babel/types").PipelineBareFunction} PipelineBareFunction
 * @typedef {import("@babel/types").PipelinePrimaryTopicReference} PipelinePrimaryTopicReference
 * @typedef {import("@babel/types").ClassPrivateProperty} ClassPrivateProperty
 * @typedef {import("@babel/types").ClassPrivateMethod} ClassPrivateMethod
 * @typedef {import("@babel/types").ImportAttribute} ImportAttribute
 * @typedef {import("@babel/types").Decorator} Decorator
 * @typedef {import("@babel/types").DoExpression} DoExpression
 * @typedef {import("@babel/types").ExportDefaultSpecifier} ExportDefaultSpecifier
 * @typedef {import("@babel/types").PrivateName} PrivateName
 * @typedef {import("@babel/types").RecordExpression} RecordExpression
 * @typedef {import("@babel/types").TupleExpression} TupleExpression
 * @typedef {import("@babel/types").DecimalLiteral} DecimalLiteral
 * @typedef {import("@babel/types").StaticBlock} StaticBlock
 * @typedef {import("@babel/types").TSParameterProperty} TSParameterProperty
 * @typedef {import("@babel/types").TSDeclareFunction} TSDeclareFunction
 * @typedef {import("@babel/types").TSDeclareMethod} TSDeclareMethod
 * @typedef {import("@babel/types").TSQualifiedName} TSQualifiedName
 * @typedef {import("@babel/types").TSCallSignatureDeclaration} TSCallSignatureDeclaration
 * @typedef {import("@babel/types").TSConstructSignatureDeclaration} TSConstructSignatureDeclaration
 * @typedef {import("@babel/types").TSPropertySignature} TSPropertySignature
 * @typedef {import("@babel/types").TSMethodSignature} TSMethodSignature
 * @typedef {import("@babel/types").TSIndexSignature} TSIndexSignature
 * @typedef {import("@babel/types").TSAnyKeyword} TSAnyKeyword
 * @typedef {import("@babel/types").TSBooleanKeyword} TSBooleanKeyword
 * @typedef {import("@babel/types").TSBigIntKeyword} TSBigIntKeyword
 * @typedef {import("@babel/types").TSIntrinsicKeyword} TSIntrinsicKeyword
 * @typedef {import("@babel/types").TSNeverKeyword} TSNeverKeyword
 * @typedef {import("@babel/types").TSNullKeyword} TSNullKeyword
 * @typedef {import("@babel/types").TSNumberKeyword} TSNumberKeyword
 * @typedef {import("@babel/types").TSObjectKeyword} TSObjectKeyword
 * @typedef {import("@babel/types").TSStringKeyword} TSStringKeyword
 * @typedef {import("@babel/types").TSSymbolKeyword} TSSymbolKeyword
 * @typedef {import("@babel/types").TSUndefinedKeyword} TSUndefinedKeyword
 * @typedef {import("@babel/types").TSUnknownKeyword} TSUnknownKeyword
 * @typedef {import("@babel/types").TSVoidKeyword} TSVoidKeyword
 * @typedef {import("@babel/types").TSThisType} TSThisType
 * @typedef {import("@babel/types").TSFunctionType} TSFunctionType
 * @typedef {import("@babel/types").TSConstructorType} TSConstructorType
 * @typedef {import("@babel/types").TSTypeReference} TSTypeReference
 * @typedef {import("@babel/types").TSTypePredicate} TSTypePredicate
 * @typedef {import("@babel/types").TSTypeQuery} TSTypeQuery
 * @typedef {import("@babel/types").TSTypeLiteral} TSTypeLiteral
 * @typedef {import("@babel/types").TSArrayType} TSArrayType
 * @typedef {import("@babel/types").TSTupleType} TSTupleType
 * @typedef {import("@babel/types").TSOptionalType} TSOptionalType
 * @typedef {import("@babel/types").TSRestType} TSRestType
 * @typedef {import("@babel/types").TSNamedTupleMember} TSNamedTupleMember
 * @typedef {import("@babel/types").TSUnionType} TSUnionType
 * @typedef {import("@babel/types").TSIntersectionType} TSIntersectionType
 * @typedef {import("@babel/types").TSConditionalType} TSConditionalType
 * @typedef {import("@babel/types").TSInferType} TSInferType
 * @typedef {import("@babel/types").TSParenthesizedType} TSParenthesizedType
 * @typedef {import("@babel/types").TSTypeOperator} TSTypeOperator
 * @typedef {import("@babel/types").TSIndexedAccessType} TSIndexedAccessType
 * @typedef {import("@babel/types").TSMappedType} TSMappedType
 * @typedef {import("@babel/types").TSLiteralType} TSLiteralType
 * @typedef {import("@babel/types").TSExpressionWithTypeArguments} TSExpressionWithTypeArguments
 * @typedef {import("@babel/types").TSInterfaceDeclaration} TSInterfaceDeclaration
 * @typedef {import("@babel/types").TSInterfaceBody} TSInterfaceBody
 * @typedef {import("@babel/types").TSTypeAliasDeclaration} TSTypeAliasDeclaration
 * @typedef {import("@babel/types").TSAsExpression} TSAsExpression
 * @typedef {import("@babel/types").TSTypeAssertion} TSTypeAssertion
 * @typedef {import("@babel/types").TSEnumDeclaration} TSEnumDeclaration
 * @typedef {import("@babel/types").TSEnumMember} TSEnumMember
 * @typedef {import("@babel/types").TSModuleDeclaration} TSModuleDeclaration
 * @typedef {import("@babel/types").TSModuleBlock} TSModuleBlock
 * @typedef {import("@babel/types").TSImportType} TSImportType
 * @typedef {import("@babel/types").TSImportEqualsDeclaration} TSImportEqualsDeclaration
 * @typedef {import("@babel/types").TSExternalModuleReference} TSExternalModuleReference
 * @typedef {import("@babel/types").TSNonNullExpression} TSNonNullExpression
 * @typedef {import("@babel/types").TSExportAssignment} TSExportAssignment
 * @typedef {import("@babel/types").TSNamespaceExportDeclaration} TSNamespaceExportDeclaration
 * @typedef {import("@babel/types").TSTypeAnnotation} TSTypeAnnotation
 * @typedef {import("@babel/types").TSTypeParameterInstantiation} TSTypeParameterInstantiation
 * @typedef {import("@babel/types").TSTypeParameterDeclaration} TSTypeParameterDeclaration
 * @typedef {import("@babel/types").TSTypeParameter} TSTypeParameter
 * @typedef {import("@babel/types").Aliases} Aliases
 * @typedef {import("@babel/types").Comment} Comment
 * @typedef {import("@babel/types").Node} Node
 * @typedef {import("@babel/types").NumberLiteral} NumberLiteral
 * @typedef {import("@babel/types").RegexLiteral} RegexLiteral
 * @typedef {import("@babel/types").RestProperty} RestProperty
 * @typedef {import("@babel/types").SpreadProperty} SpreadProperty
 * @typedef {import("@babel/types").Expression} Expression
 * @typedef {import("@babel/types").Binary} Binary
 * @typedef {import("@babel/types").Scopable} Scopable
 * @typedef {import("@babel/types").BlockParent} BlockParent
 * @typedef {import("@babel/types").Block} Block
 * @typedef {import("@babel/types").Statement} Statement
 * @typedef {import("@babel/types").Terminatorless} Terminatorless
 * @typedef {import("@babel/types").CompletionStatement} CompletionStatement
 * @typedef {import("@babel/types").Conditional} Conditional
 * @typedef {import("@babel/types").Loop} Loop
 * @typedef {import("@babel/types").While} While
 * @typedef {import("@babel/types").ExpressionWrapper} ExpressionWrapper
 * @typedef {import("@babel/types").For} For
 * @typedef {import("@babel/types").ForXStatement} ForXStatement
 * @typedef {import("@babel/types").Function} Function
 * @typedef {import("@babel/types").FunctionParent} FunctionParent
 * @typedef {import("@babel/types").Pureish} Pureish
 * @typedef {import("@babel/types").Declaration} Declaration
 * @typedef {import("@babel/types").PatternLike} PatternLike
 * @typedef {import("@babel/types").LVal} LVal
 * @typedef {import("@babel/types").TSEntityName} TSEntityName
 * @typedef {import("@babel/types").Literal} Literal
 * @typedef {import("@babel/types").Immutable} Immutable
 * @typedef {import("@babel/types").UserWhitespacable} UserWhitespacable
 * @typedef {import("@babel/types").Method} Method
 * @typedef {import("@babel/types").ObjectMember} ObjectMember
 * @typedef {import("@babel/types").Property} Property
 * @typedef {import("@babel/types").UnaryLike} UnaryLike
 * @typedef {import("@babel/types").Pattern} Pattern
 * @typedef {import("@babel/types").Class} Class
 * @typedef {import("@babel/types").ModuleDeclaration} ModuleDeclaration
 * @typedef {import("@babel/types").ExportDeclaration} ExportDeclaration
 * @typedef {import("@babel/types").ModuleSpecifier} ModuleSpecifier
 * @typedef {import("@babel/types").Flow} Flow
 * @typedef {import("@babel/types").FlowType} FlowType
 * @typedef {import("@babel/types").FlowBaseAnnotation} FlowBaseAnnotation
 * @typedef {import("@babel/types").FlowDeclaration} FlowDeclaration
 * @typedef {import("@babel/types").FlowPredicate} FlowPredicate
 * @typedef {import("@babel/types").EnumBody} EnumBody
 * @typedef {import("@babel/types").EnumMember} EnumMember
 * @typedef {import("@babel/types").JSX} JSX
 * @typedef {import("@babel/types").Private} Private
 * @typedef {import("@babel/types").TSTypeElement} TSTypeElement
 * @typedef {import("@babel/types").TSType} TSType
 * @typedef {import("@babel/types").TSBaseType} TSBaseType
 * @typedef {import("@babel/types").CommentTypeShorthand} CommentTypeShorthand
 * @typedef {import("@babel/types").TraversalAncestors} TraversalAncestors
 * @typedef {import("@babel/types").TraversalHandler} TraversalHandler
 * @typedef {import("@babel/types").TraversalHandlers} TraversalHandlers
 */
