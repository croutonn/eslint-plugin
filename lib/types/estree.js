/**
 * @typedef {import("@babel/types").Comment} Comment}
 * @typedef {import("@babel/types").Position} Position}
 * @typedef {import("@babel/types").Program} Program}
 * @typedef {import("@babel/types").Directive} Directive}
 * @typedef {import("@babel/types").EmptyStatement} EmptyStatement}
 * @typedef {import("@babel/types").BlockStatement} BlockStatement}
 * @typedef {import("@babel/types").ExpressionStatement} ExpressionStatement}
 * @typedef {import("@babel/types").IfStatement} IfStatement}
 * @typedef {import("@babel/types").LabeledStatement} LabeledStatement}
 * @typedef {import("@babel/types").BreakStatement} BreakStatement}
 * @typedef {import("@babel/types").ContinueStatement} ContinueStatement}
 * @typedef {import("@babel/types").WithStatement} WithStatement}
 * @typedef {import("@babel/types").SwitchStatement} SwitchStatement}
 * @typedef {import("@babel/types").ReturnStatement} ReturnStatement}
 * @typedef {import("@babel/types").ThrowStatement} ThrowStatement}
 * @typedef {import("@babel/types").TryStatement} TryStatement}
 * @typedef {import("@babel/types").WhileStatement} WhileStatement}
 * @typedef {import("@babel/types").DoWhileStatement} DoWhileStatement}
 * @typedef {import("@babel/types").ForStatement} ForStatement}
 * @typedef {import("@babel/types").ForInStatement} ForInStatement}
 * @typedef {import("@babel/types").DebuggerStatement} DebuggerStatement}
 * @typedef {import("@babel/types").FunctionDeclaration} FunctionDeclaration}
 * @typedef {import("@babel/types").VariableDeclaration} VariableDeclaration}
 * @typedef {import("@babel/types").VariableDeclarator} VariableDeclarator}
 * @typedef {import("@babel/types").BaseExpression} BaseExpression}
 * @typedef {import("@babel/types").ChainExpression} ChainExpression}
 * @typedef {import("@babel/types").ThisExpression} ThisExpression}
 * @typedef {import("@babel/types").ArrayExpression} ArrayExpression}
 * @typedef {import("@babel/types").ObjectExpression} ObjectExpression}
 * @typedef {import("@babel/types").Property} Property}
 * @typedef {import("@babel/types").FunctionExpression} FunctionExpression}
 * @typedef {import("@babel/types").SequenceExpression} SequenceExpression}
 * @typedef {import("@babel/types").UnaryExpression} UnaryExpression}
 * @typedef {import("@babel/types").BinaryExpression} BinaryExpression}
 * @typedef {import("@babel/types").AssignmentExpression} AssignmentExpression}
 * @typedef {import("@babel/types").UpdateExpression} UpdateExpression}
 * @typedef {import("@babel/types").LogicalExpression} LogicalExpression}
 * @typedef {import("@babel/types").ConditionalExpression} ConditionalExpression}
 * @typedef {import("@babel/types").SimpleCallExpression} SimpleCallExpression}
 * @typedef {import("@babel/types").NewExpression} NewExpression}
 * @typedef {import("@babel/types").MemberExpression} MemberExpression}
 * @typedef {import("@babel/types").SwitchCase} SwitchCase}
 * @typedef {import("@babel/types").CatchClause} CatchClause}
 * @typedef {import("@babel/types").Identifier} Identifier}
 * @typedef {import("@babel/types").SimpleLiteral} SimpleLiteral}
 * @typedef {import("@babel/types").RegExpLiteral} RegExpLiteral}
 * @typedef {import("@babel/types").ForOfStatement} ForOfStatement}
 * @typedef {import("@babel/types").Super} Super}
 * @typedef {import("@babel/types").SpreadElement} SpreadElement}
 * @typedef {import("@babel/types").ArrowFunctionExpression} ArrowFunctionExpression}
 * @typedef {import("@babel/types").YieldExpression} YieldExpression}
 * @typedef {import("@babel/types").TemplateLiteral} TemplateLiteral}
 * @typedef {import("@babel/types").TaggedTemplateExpression} TaggedTemplateExpression}
 * @typedef {import("@babel/types").TemplateElement} TemplateElement}
 * @typedef {import("@babel/types").AssignmentProperty} AssignmentProperty}
 * @typedef {import("@babel/types").ObjectPattern} ObjectPattern}
 * @typedef {import("@babel/types").ArrayPattern} ArrayPattern}
 * @typedef {import("@babel/types").RestElement} RestElement}
 * @typedef {import("@babel/types").AssignmentPattern} AssignmentPattern}
 * @typedef {import("@babel/types").ClassBody} ClassBody}
 * @typedef {import("@babel/types").MethodDefinition} MethodDefinition}
 * @typedef {import("@babel/types").ClassDeclaration} ClassDeclaration}
 * @typedef {import("@babel/types").ClassExpression} ClassExpression}
 * @typedef {import("@babel/types").MetaProperty} MetaProperty}
 * @typedef {import("@babel/types").ImportDeclaration} ImportDeclaration}
 * @typedef {import("@babel/types").ImportSpecifier} ImportSpecifier}
 * @typedef {import("@babel/types").ImportExpression} ImportExpression}
 * @typedef {import("@babel/types").ImportDefaultSpecifier} ImportDefaultSpecifier}
 * @typedef {import("@babel/types").ImportNamespaceSpecifier} ImportNamespaceSpecifier}
 * @typedef {import("@babel/types").ExportNamedDeclaration} ExportNamedDeclaration}
 * @typedef {import("@babel/types").ExportSpecifier} ExportSpecifier}
 * @typedef {import("@babel/types").ExportDefaultDeclaration} ExportDefaultDeclaration}
 * @typedef {import("@babel/types").ExportAllDeclaration} ExportAllDeclaration}
 * @typedef {import("@babel/types").AwaitExpression} AwaitExpression}
 * @typedef {import("@babel/types").Node} ASTNode}
 * @typedef {import("@babel/types").Function} Function}
 * @typedef {import("@babel/types").Statement} Statement}
 * @typedef {import("@babel/types").Declaration} Declaration}
 * @typedef {import("@babel/types").CallExpression} CallExpression}
 * @typedef {import("@babel/types").Pattern} Pattern}
 * @typedef {import("@babel/types").Literal} Literal}
 * @typedef {import("@babel/types").UnaryOperator} UnaryOperator}
 * @typedef {import("@babel/types").BinaryOperator} BinaryOperator}
 * @typedef {import("@babel/types").LogicalOperator} LogicalOperator}
 * @typedef {import("@babel/types").AssignmentOperator} AssignmentOperator}
 * @typedef {import("@babel/types").UpdateOperator} UpdateOperator}
 * @typedef {import("@babel/types").Class} Class}
 * @typedef {import("@babel/types").ModuleDeclaration} ModuleDeclaration}
 * @typedef {import("@babel/types").ModuleSpecifier} ModuleSpecifier}
 */
